package.json에서 (수정하기 전)

"scripts": {
    "start": "node index.js", 
    "prestart": "tsc"
  }

위에와 같은 것이 있는데 npm start를 할때마다 npm은 prestart를 먼저 실행하고 start를 실행한다. prestart를 하면 tsc가 실행이되고 tsc는 tsconfig.json파일안에 include안에 입력되어있는 ts파일에 있는 코드를 컴파일해서 .js랑 .js.map을 만들어 준다.
그렇게 컴파일된 index.js를 npm start가 실행시켜 준다.

node.js는 타입스크립트를 이해하지 못하기 때문에 일반적인 자바스크립트 코드로 컴파일하는 작업이 필요하다.




(수정한 것)
위에 있는 package.json의 내용이 tsc-watch설치로 인해 아래와 같이 바뀌었다. 설명은 위에있는 설명과 같다.
"scripts": {
    "start": "tsc-watch --onSuccess \" node dist/index.js\" "
  }


정확하게 말하면 "tsc-watch --onSuccess \"이 부분이 위에서의 prestart와 같은 역할이고 
" node dist/index.js\"이 부분이 위에서의 start와 같은 역할이다. 

---------------------------------------------------------------------  




tsconfig.json에서의 내용을 메모한 것이다.(수정하기 전)

{
    "compilerOptions": {
        "module": "commonjs", //node.js를 평범하게 사용하고 다양한 걸 import하거나 export할 수 있게 만드는 곳
        "target": "ES2015", //어떤버전의 자바스크립트로 컴파일 되고 싶은지 적는 곳
        "sourceMap":true, //sourcemap 처리를 하고 싶은지 알려주는 곳 
    },
    "include": [ //어떤파일들이 컴파일 과정에 포함되는지 타입스크립트에게 알려주는 곳, include라고 부르고 컴파일 과정에서 포함할 파일의 배열을 적으면 된다. ,
        "index.ts" //tsc라고 터미널에 입력하면 tsc는 ts파일에 있는 코드를 컴파일해서 index.js랑 index.js.map을 만들어 준다.(index.ts가 아닌 다른 ts파일도 include안에 넣으면 tsc가 동일하게 해준다.)
    ],
    "exclude": [ //컴파일 대상에서 제외시킬 파일
        "node_modules"
    ]
}


수정한 것은 tsconfig.json에 있다.
------------------------------------------------------------------------



const sayHi = (name: string, age: number, gender: string): void => { //매개변수에 있는 타입지정은 매개변수의 타입유형이고 매개변수 밖에 있는 타입지정은, 다시말해 괄호밖에 있는 타입지정은 (여기서는 : void를 말한다) 함수의 리턴값의 타입유형이다
    console.log(`Hello ${name}, you are ${age}, you are a ${gender}`);
}

sayHi("Nicolas", 24, "male"); //여기에 마우스를 올리면 void가 위치하고 있는데 void가 있는 이유는 sayHi의 function들이 어떤 유형의 값을 돌려주는지를 나타내기 위함이다.

export {};




---------------------------------------------------------------------------

interface Human {
    name: string,
    age: number,
    gender: string
}

const person = {
    name: "nicolas",
    age: 22,
    gender: "male",
}

const sayHi = (person: Human): string => { //매개변수에 있는 타입지정은 매개변수의 타입유형이고 매개변수 밖에 있는 타입지정은, 다시말해 괄호밖에 있는 타입지정은 (여기서는 : void를 말한다) 함수의 리턴값의 타입유형이다
    return `Hello ${person.name}, you are ${person.age}, you are a ${person.gender}`;
}

console.log(sayHi(person)); 

export { };


위에 코드와 같이 타입지정하는 것에 대해서 interface라는 것을 사용해서 Human이라는 객체안에 그룹으로 지정시켰다.
interface는 타입스크립트에서만 동작한다. 타입스크립트에서 interface를 사용하고 자바스크립트로 컴파일이 되면 컴파일된 자바스크립트에서는 interface와 관련된 것들은 나오지 않는다.

---------------------------------------------------------------------------

class Human {
    public name: string;
    public age: number;
    public gender: string;
    constructor(name: string, age: number, gender?:string){ //constructor함수는 클래스가 시작할 때마다 호출된다. 클래스가 갖고있는 기본기능이라고 할 수 있다.
        this.name = name;
        this.age = age;
        this.gender = gender;
    } 
}

const lynn = new Human("Lynn", 18, "female")

const sayHi = (person: Human): string => { //매개변수에 있는 타입지정은 매개변수의 타입유형이고 매개변수 밖에 있는 타입지정은, 다시말해 괄호밖에 있는 타입지정은 (여기서는 : void를 말한다) 함수의 리턴값의 타입유형이다
    return `Hello ${person.name}, you are ${person.age}, you are a ${person.gender}`;
}

console.log(sayHi(lynn)); 

export { };



interface를 자바스크립트안에 넣고 싶을때가 있을 수도 있다. 그럴때 interface대신에 쓰는 것이 타입스크립트에서 쓰이는 class이다. 
타입스크립트에서 쓰이는 class는 자바스크립트에서 쓰이는 class와 조금 다르다. 타입스크립트에서는 class가 어떤 속성들을 가져야 하는지 선언해야한다.
그리고 그런 속성들이 가지고 있는 권한(permission)들도 선언해야 한다.

여기서 권한에는 두가지 종류가 있다. public과 private이 두가지가 있다.

public은 js에서의 전역변수와 유사하다. (class 외부에서 접근 가능함)
private이 js에서의 지역변수와 유사하다. (class 외부에서 접근 불가함)

public과 private도 ts에서만 쓰이기 때문에 js에서는 나오지 않는다.

interface를 사용하면 ts 측면에서 좀 더 안전하다. 그러나 react나 node.js와 같은걸 사용하면 class를 사용해야 한다.


---------------------------------------------------------------------------


class Block {
    public index: number;
    public hash: string;
    public previousHash: string;
    public data: string;
    public timestamp: number;
    constructor(index: number,
        hash: string,
        previousHash: string,
        data: string,
        timestamp: number
    ){
        this.index = index;
        this.hash = hash;
        this.previousHash = previousHash;
        this.data = data;
        this.timestamp = timestamp;
    }
}

const genesisBlock:Block = new Block(0, "20202020202", "", "Hello", 123456);

let blockchain: Block[] = [genesisBlock]; //여기서 변수 blockchain은 배열이고 Block[]은 배열안에 있는 Block객체를 의미하고 [genesisBlock]은 Block객체의 value를 의미한다.(console참조)


console.log(blockchain);

export { };






